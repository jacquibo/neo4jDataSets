// The following are example queries to run against the MusicGraph database, once all the csv files in this folder have been imported using the Cypher scripts in the other txt files

// Example Cypher Queries for the Music Graph

// a. Find albums of a liked artist or group
MATCH (p:Person)-[l:LIKES]->(ag)-->(a:Album)
RETURN p,ag,a

// b. What albums is a liked 8+ artist connected to?
MATCH (p:Person)-[l:LIKES]->(ag)-->(a:Album)
WHERE l.score >=8
RETURN p.name,l.score,ag.name,a.title

// c. What other unliked artists might a person like?
MATCH (p:Person)-[l:LIKES]->(ag)-->(a:Album)<--(ag2)
WHERE l.score >=8 AND NOT (p)-[:LIKES]->(ag2)
RETURN p.name,ag.name AS Liked_Artist,a.title AS Via, ag2.name AS Suggested_Artist

// d. Friend suggestions via album (if we wanted to start allowing people to friend each other we could include a new FRIENDS_WITH relationship)
MATCH (p:Person)-[l:LIKES]->(ag)-->(a:Album)<--(ag2)<-[l2:LIKES]-(p2:Person)
WHERE l.score >=5 AND l2.score >=5 AND NOT (p)-[:FRIENDS_WITH]-(p2) AND NOT p.group = p2.personId
RETURN p.name,a.title AS Via, p2.name AS Suggested_Friend

// e. Friend suggestions via artist (if we wanted to start allowing people to friend each other we could include a new FRIENDS_WITH relationship)
MATCH (p:Person)-[l:LIKES]->(ag)<-[l2:LIKES]-(p2:Person)
WHERE l.score >=5 AND l2.score >=5 AND NOT (p)-[:FRIENDS_WITH]-(p2) AND NOT p.personId = p2.personId
RETURN p.name,ag.name AS Via, p2.name AS Suggested_Friend

// Useful general scripts

// RETURN ALL - return the whole graph!
MATCH (n) RETURN (n)

// DELETE ALL - use this to start again!
MATCH (n)
DETACH DELETE n
